- Passing json as promise:
  Lodaing the html page, 'new classTools.pageClass()' @./js/destination.js is executed synchronously.
  The class is istantiated immediately and 'this.jData = jData' variable passing jData as
  argument to the class constructor yelds to a "before assignement", that is, before the promise is fulfilled.
  There's no event handler related to the promise which could wait for the promise completion.
  --> Fix this making 'this.init()' method invoked by constructor async and await the promise data.

- Use Class properties (fields) outside constructor:
  Check: https://stackoverflow.com/questions/64436532/javascript-class-property-inside-vs-outside-constructor.
  The difference is about methods: a method is associated to the Class and not to the Object, so if you assign a field 'myField',
  it doesn't belong to Class but to 'const myObj = new MyClass()': 'myObj.myField' ok, 'MyClass.myField' undefined. (https://it.javascript.info/class#proprieta-di-una-classe)
- Reference to './js/crew.js': 
    *Cosa ho imparato oggi:
    - Estendere una classe con metodi che hanno arrow functions (non possono usare super al loro interno);
    - Ho sovrascritto tramite 'super' la classe che vuole richiamare questi metodi; trattandosi di gestori di eventi e' necessario 
      impostare le callback come 'arrow functions' altrimenti si avrebbe errore undefined utilizzando 'this.callback'
    - Dopo aver richiamato 'super.eventHandler()' nel metodo ho aggiunto nella classe figlio nuovi metodi rinonminati: essendo il metodo 'childEvenetHandler'
      dichiratao come funzione 'non arrow' puo' utilizzare 'super' per ereditare dalla classe generatrice
    - Le callback nelle funzioni dopo 'super.parentEventHandler()' possono richiamare i metodi presenti nella classe figlio, che dovendo gestire eventi,
      necessita di utilizzare this, quindi questi metodi sono dichiarati nuovamente come 'arrow functions'.
    
    - La classe estesa 'PageClassCrew' necessita di un'attivazione, infatti invocandola con new si ha riferimento a 'PageClass' che ha un suo 'init()' nel costruttore,
      occorre richiamare il controllo dell'azione inserendo nel suo costruttore un richiamo alla funzione che governa i task in questa classe ('evensListener').
    - Nota su prototype super and ()=> functions:
      Assegnando un metodo arrow ad una classe non viene aggiunto al prototype dell'istanza ma passato come proprieta' dell'istanza:
      per questo non posso farci riferimento in una classe ereditata usando 'super.metodoParent()' ma 'this.metodoParent()'. 
      Ad esempio in una istanza di 'js/lib/classTools:PageClass' mi trovo:
      ```
      [Prototype]]
      : 
      Object
      constructor
      : 
      class PageClass
      eventsListener
      : 
      eventsListener() { window.addEventListener('load', this.eventsLoad); this.subnavTg.forEach(n => {…}
      init
      : 
      ƒ async init()
      mqSubnavImgCheck
      : 
      ƒ mqSubnavImgCheck()
      subnavGetImgSrc
      : 
      ƒ subnavGetImgSrc(ind)
      subnavUpdater
      : 
      subnavUpdater(target) { this.mqSubnavImgCheck(); this.subnavInd = common.subnavMatcher(target, this.subnavUpdateStuff.tgClass); this.imgPage.src = this.subnavGetImgSrc(this.subnavInd); const elemJSON = this.jData[this.subnavInd]; this.subnavCurrent.classList.remove(this.subnavUpdateStuff.tgCurrentClass); target.classList.add(this.subnavUpdateStuff.tgCurrentClass); this.subnavCurrent = target; this.imgPage.classList.remove(this.subnavUpdateStuff.animationClass); window.requestAnimationFrame(() => {…}
      [[Prototype]]
      : 
      Object
      ```
      Mancano i metodi arrow come 'eventsLoad, eventsChange, etc.'.
      Vedi https://stackoverflow.com/questions/57561473/how-to-invoke-arrow-functions-on-a-superclass-with-super-in-subclass
      /*- Nota sull'estensione delle classe 'js/lib/classtools.js:PageClass' da parte di 'js/crew.js:PageClassCrew': 
      Non bisogna reimplementare il metodo 'crewInit()' perché richiami 'super.init()' del parent, in quanto già invoca il metodo 'eventsListener()' del genitore stesso.
      'init.()' è già nel costruttore del parent e quindi viene invocato; piuttoso invocare nel costruttore della classe ereditata un trigger al metodo che gestisce i nuovi eventi ('crewEventsListener()').
      */
      - Promise between inherited classes: https://stackoverflow.com/questions/43431550/async-await-class-constructor

  - Dig into 404 error loading img reference in content element: it depends on "classtools.js.PageClass@"subnavUpdater": 
    need to make it 'async' and 'await' for this.imgTgSrc otherwise you'll get errors from server like:
    ```	subnavUpdater http://localhost:8080/js/lib/classtools.js:69:31 --> this.imgTg.src = /*await*/ this.subnavGetImgSrc(this.subnavInd);```
    Maybe it could depends on promise context and the fact that an image ref (obtained by 'json.data') needs to be asynchronous if it depends on a promise?
    - If you let subnavGetImgSrc to be async you get problems anyway (check: \\Desktop\space-history-PageClass-promise-async-problem.jpg); 
    'this.subnavInd' is resolved by 'common.subnavMatcher' lib function.

